name: Deploy

on:
  workflow_dispatch:


jobs:
  build_deploy_to_dev:
    name: Build and deploy
    runs-on: self-hosted
    timeout-minutes: 30
    env:
      CONTAINER_NAME: "dvault_front"
      IMAGE_NAME: "dvault_front"
      CONTAINER_PORT: "80"
      REACT_APP_API_BASE_URL: "http://84.252.139.98:8080/v1"
      TAG: "latest"
      DOCKER_NETWORK: "docker_network"
    steps:
      - name: Check for actual
        uses: actions/checkout@v4

      - name: Build
        run: >
          docker build 
          -t ${{ env.IMAGE_NAME }}:${{ env.TAG }}
          --build-arg REACT_APP_API_BASE_URL=${{ env.REACT_APP_API_BASE_URL }}
          .

      - name: Stop previous
        run: >
          CONTAINER_EXISTS=$(docker ps -a --format '{{.Names}}' --filter "name=${{ env.CONTAINER_NAME }}" -a | wc -w);
          if  [[ $CONTAINER_EXISTS != 0 ]] ;
          then docker container stop ${{ env.CONTAINER_NAME }};
          docker container rm ${{ env.CONTAINER_NAME }};
          else echo "Container ${{ env.CONTAINER_NAME }} does not exist";
          fi

      - name: Run container
        run: >
          docker run 
          --name ${{ env.CONTAINER_NAME }}
          -p ${{ env.CONTAINER_PORT }}:80
          --network ${{ env.DOCKER_NETWORK }}
          --env REACT_APP_API_BASE_URL=${{ env.REACT_APP_API_BASE_URL }}
          -d
          ${{ env.IMAGE_NAME }}:${{ env.TAG }}

      - name: Perform cleanup
        if: always()
        run: docker system prune -f
